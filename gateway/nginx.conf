worker_processes  1;

events { worker_connections 1024; }

http {
  sendfile on;
  client_max_body_size 10m;

  map $http_origin $cors_allow_origin {
    default "*";  # TODO: set to specific origin(s) in prod
  }

  server {
    listen 80;

    location = /health {
      return 200 "ok";
      add_header Content-Type text/plain;
    }

    set $proxy_host_header $host;

  # Ensure upstream CORS headers don't duplicate ours
  proxy_hide_header Access-Control-Allow-Origin;

    # CORS helper
    set $cors_methods "GET,POST,PUT,PATCH,DELETE,OPTIONS";
    set $cors_headers "Authorization,Content-Type,Idempotency-Key";

    # Allow CORS for localhost:3000
    if ($http_origin ~* "http://localhost:3000") {
      set $cors_allow_origin $http_origin;
    }

    # Auth service
    location /api/v1/auth/ {
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $cors_allow_origin;
        add_header Access-Control-Allow-Methods $cors_methods;
        add_header Access-Control-Allow-Headers $cors_headers;
        add_header Access-Control-Max-Age 86400;
        return 204;
      }
      add_header Access-Control-Allow-Origin $cors_allow_origin always;
      proxy_set_header Host $proxy_host_header;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Authorization $http_authorization;
      proxy_pass http://auth-service:8001;
    }

    # Auth service health via gateway
    location = /api/v1/auth/health {
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $cors_allow_origin;
        add_header Access-Control-Allow-Methods $cors_methods;
        add_header Access-Control-Allow-Headers $cors_headers;
        add_header Access-Control-Max-Age 86400;
        return 204;
      }
      add_header Access-Control-Allow-Origin $cors_allow_origin always;
      proxy_set_header Host $proxy_host_header;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_pass http://auth-service:8001/health;
    }

    # Hotel service
    location /api/v1/services/ {
  # Normalize trailing slash to match FastAPI route without slash
  rewrite ^/api/v1/services/$ /api/v1/services break;
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $cors_allow_origin;
        add_header Access-Control-Allow-Methods $cors_methods;
        add_header Access-Control-Allow-Headers $cors_headers;
        add_header Access-Control-Max-Age 86400;
        return 204;
      }
      add_header Access-Control-Allow-Origin $cors_allow_origin always;
      proxy_set_header Host $proxy_host_header;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Authorization $http_authorization;
      proxy_pass http://hotel-service:8002;
    }

    # Hotel service health via gateway
    location = /api/v1/services/health {
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $cors_allow_origin;
        add_header Access-Control-Allow-Methods $cors_methods;
        add_header Access-Control-Allow-Headers $cors_headers;
        add_header Access-Control-Max-Age 86400;
        return 204;
      }
      add_header Access-Control-Allow-Origin $cors_allow_origin always;
      proxy_set_header Host $proxy_host_header;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_pass http://hotel-service:8002/health;
    }

    # Also handle requests without trailing slash (e.g., POST /api/v1/services)
    location = /api/v1/services {
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $cors_allow_origin;
        add_header Access-Control-Allow-Methods $cors_methods;
        add_header Access-Control-Allow-Headers $cors_headers;
        add_header Access-Control-Max-Age 86400;
        return 204;
      }
      add_header Access-Control-Allow-Origin $cors_allow_origin always;
      proxy_set_header Host $proxy_host_header;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Authorization $http_authorization;
      # Pass through to the same upstream path without redirecting
      proxy_pass http://hotel-service:8002/api/v1/services;
    }

    # Booking service
    location /api/v1/bookings/ {
  # Normalize trailing slash to match FastAPI route without slash
  rewrite ^/api/v1/bookings/$ /api/v1/bookings break;
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $cors_allow_origin;
        add_header Access-Control-Allow-Methods $cors_methods;
        add_header Access-Control-Allow-Headers $cors_headers;
        add_header Access-Control-Max-Age 86400;
        return 204;
      }
      add_header Access-Control-Allow-Origin $cors_allow_origin always;
      proxy_set_header Host $proxy_host_header;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Authorization $http_authorization;
      proxy_pass http://booking-service:8003;
    }

    # Booking service health via gateway
    location = /api/v1/bookings/health {
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $cors_allow_origin;
        add_header Access-Control-Allow-Methods $cors_methods;
        add_header Access-Control-Allow-Headers $cors_headers;
        add_header Access-Control-Max-Age 86400;
        return 204;
      }
      add_header Access-Control-Allow-Origin $cors_allow_origin always;
      proxy_set_header Host $proxy_host_header;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_pass http://booking-service:8003/health;
    }

    # Also handle /api/v1/bookings without trailing slash (e.g., POST /api/v1/bookings)
    location = /api/v1/bookings {
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $cors_allow_origin;
        add_header Access-Control-Allow-Methods $cors_methods;
        add_header Access-Control-Allow-Headers $cors_headers;
        add_header Access-Control-Max-Age 86400;
        return 204;
      }
      add_header Access-Control-Allow-Origin $cors_allow_origin always;
      proxy_set_header Host $proxy_host_header;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Authorization $http_authorization;
      proxy_pass http://booking-service:8003/api/v1/bookings;
    }

    # Payment service
    location /api/v1/payments/ {
  # Normalize trailing slash to match FastAPI route without slash
  rewrite ^/api/v1/payments/$ /api/v1/payments break;
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $cors_allow_origin;
        add_header Access-Control-Allow-Methods $cors_methods;
        add_header Access-Control-Allow-Headers $cors_headers;
        add_header Access-Control-Max-Age 86400;
        return 204;
      }
      add_header Access-Control-Allow-Origin $cors_allow_origin always;
      proxy_set_header Host $proxy_host_header;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Authorization $http_authorization;
      proxy_pass http://payment-service:8004;
    }

    # Payment service health via gateway
    location = /api/v1/payments/health {
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $cors_allow_origin;
        add_header Access-Control-Allow-Methods $cors_methods;
        add_header Access-Control-Allow-Headers $cors_headers;
        add_header Access-Control-Max-Age 86400;
        return 204;
      }
      add_header Access-Control-Allow-Origin $cors_allow_origin always;
      proxy_set_header Host $proxy_host_header;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_pass http://payment-service:8004/health;
    }

    # Also handle /api/v1/payments without trailing slash (e.g., POST /api/v1/payments)
    location = /api/v1/payments {
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $cors_allow_origin;
        add_header Access-Control-Allow-Methods $cors_methods;
        add_header Access-Control-Allow-Headers $cors_headers;
        add_header Access-Control-Max-Age 86400;
        return 204;
      }
      add_header Access-Control-Allow-Origin $cors_allow_origin always;
      proxy_set_header Host $proxy_host_header;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Authorization $http_authorization;
      proxy_pass http://payment-service:8004/api/v1/payments;
    }
  }
}
